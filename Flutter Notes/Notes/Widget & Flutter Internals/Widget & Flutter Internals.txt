
1. When 'build' runs the flutter re-draws the screen or rebuild all the pixels

	That sounds that it slows the performance but flutter don't re-draw screen 
	

2. Flutter aims to give 60 FPS of Screen.
 
3. If nothing changes. Flutter give you back the same UI that is stores in memory.

4. 'Build' is called by Flutter whenever state changes. 

5. Everything in Flutter is a Widget. But at the End of a Day, Every Widget is made
   of class and you can instantiate like a class which takes different arguments.
   You can make their objects. When 'Build' runs again then new Intances of every
   Widget created on Screen with 60 FPS.

6. Every Widget is immutable. You can't make changes to its properties.
   But you can extend the Widgets to make your Own Widget with some custom
   Configuration.

7. Querying the current media using [MediaQuery.of] will cause your widget 
   to rebuild automatically whenever the [MediaQueryData] changes 
   (e.g., if the user rotates their device).

_______________________________________________________________________________
===============================================================================


		WIDGET TREE & ELEMENT TREE & RENDER TREE

	Widget tree is the code tree and logic you applied.
	while Element and Render is control internally by Flutter and give
	support to Widget Tree in rendering and building on Screen.


Note: More exlaination is in picture.	

_______________________________________________________________________________
===============================================================================


		Extracting Widgets

	// You can extract all the widgets which use MediaQuery and put it in
	// one file. Because whenever MediaQuery changes the build function is
	// called automatically.


	// Select the Widget part which you want in seperate file
	// Using Refactoring tool -> Extract the Widget

	// It doesn't give performance but make Code Readable.


_______________________________________________________________________________
===============================================================================


			BUILD METHODS


Widget _buildLandscapeContent() {...}

Widget _buildPortraitContent() {...}


List<Widget> _buildLandscapeContent() {return[..]}    // For Returning multiple widgets


if (!isLandScape)
              ..._buildLandscapeContent(mediaQuery, appBar, txListWidget)



	// When you will the List<Widget> build Method then it is also a List
	// and an error will come forward which is you can't use a List<Widget>
	// inside another List<Widget>. So here we will use Spread operator.
	// Which will divide each single item and place in another List<Widget>
 



List<Widget> _buildLandscapeContent(
      
	MediaQueryData mediaQuery, AppBar appBar, Widget txListWidget) {
    
	return [....] 

	}


_________________________________________________________________________
=========================================================================

			App LifeCycle

	// In Main.dart file -> there is a mixin and add some features to your class
	// If you want to bring features from multiple classes.
	// You would use a 'Mixin'.

	// We use it by adding 'with' keyword.


class MyHome extends State<MyHome> {...}            // Normal Class


class MyHome extends State<MyHome> with .... {...}      // Class with Mixin


class MyHome extends State<MyHome> with WidgetsBindingObserver{...}    // Normal Class




	// After adding this you can now add methods inside this class



@override
void initState() {

	WidgetsBinding.instance.addObserver(this);
	super.initState();
}


@override
void didChangeAppLifeCycleState(AppLifeCycleState state) {....}


@override
dispose() {
	WidgetsBinding.instance.removeObserver(this);
	super.dispose();
}



	
	// Write this code if you want to control the App Life Cycle like:
	// paused, inactive, resumed, suspended

	

_________________________________________________________________________
=========================================================================



			BUILD CONTEXT


	// The context build the Skeleton of your widget tree.
	// They know about your Widget tree, where to place a widget and to where the widget
	// belongs to.

	// Context gives you direct communication. 



_________________________________________________________________________
=========================================================================


			Dynamically Changing the Color


 Color? _bgColor;
  @override
  void initState() {
    const availableColors = [
      Colors.red,
      Colors.blue,
      Colors.black,
      Colors.amberAccent,
    ];
    _bgColor = availableColors[Random().nextInt(4)];
    super.initState();
  }



_________________________________________________________



			KEY

	// This is used with every other Widget. But not with Stateless Widget.
	
	








