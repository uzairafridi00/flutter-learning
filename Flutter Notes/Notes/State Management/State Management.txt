		Provider -> Package for State Management 

	// The provider package is an easy to use package which is basically a wrapper 
	// around the InheritedWidgets that makes it easier to use and manage. 
	// It provides a state management technique that is used for managing a piece of data around the app.




		Installing Provider

flutter pub add provider


	// After installing it. Make a provider class with get Methods using 'Mixin' ChangeNotifier
	// and all the data that it accessed.

	// Now you can get the access of data with


 final productsData = Provider.of<Products>(context);
 final products = productsData.items;



____________________________________________________________________________
============================================================================


	ChangeNotifierProvider  => Entry	=> Wrap the main.dart file on this
	Provider.of()		=> Interaction	=> It gives you interaction of using Functions
	Consumer		=> User		=> It shows the current value
	ChangeNotifier		=> Data Holder	=> It extends our provider class


____________________________________________________________________________
============================================================================

			COSUMER vs PROVIDER


Consumer<ProviderName>(
	builder: (ctx, providername, child) => IconButton(...)
)


	// Consumer can be helpful in the case where you want to change only one part of widget
	// It helps in optimization and will not rebuild the whole widget when something changes

	// You need to false the listner in Provider. Then you app will be optimized


final productsData = Provider.of<Products>(context, listen: false);


_______________________________________________________________________
=======================================================================


		MULTIPLE PROVIDERS


	MultiProvider => is a widget to allow us to use multiple providers at a same time


MultiProvider(
	providers: [
		ChangeNotifierProvider.value(
			value: ProviderOne(),
		),
		ChangeNotifierProvider.value(
			value: ProviderTwo(),
		)

		
		// Below is the recommended way to use Providers

		ChangeNotifierProvider(
			create: (ctx) => ProviderOne(),
		),
		ChangeNotifierProvider(
			create: (ctx) => ProviderTwo(),
		),
	]


child: MaterialApp(//..)

)
	


_______________________________________________________________________
=======================================================================





