		Passing Callback Functions Around


	Everything in Flutter is an object. 

	Lifting the State up.

	We can also pass the pointer to function of Widget.
	
	You can pass the function to your Widget.

	The function (address) we are passing around is also known as a "Callback" -
	because the receiving widget calls it the future.

	// And in the Widget you then accept the pointer that is passed.

	

final Function selectHandler;

Answer({this.selectHandler});



	// If you get an error with the "selectHandler" property, you can change 

final Function selectHandler; 

	to

final VoidCallback selectHandler;

		
	// When Passing the CallBackFunction

Answer(selectHandler:() => answerQuestion()),

___________________________________________________________________________________



		INTRODUCING MAPS


	{} or Map() => Collection of key value pairs 

	{'Key': 'value'} or {1: 'value'} or {1: 12}

	The key and value can be of any type

	

{'questionText': 'What your name?', 'answers': ['black', 'Max', 'Mike']}


var questions = [
	{
	  'questionText': 'What your name?', 
	  'answers': ['black', 'Max', 'Mike']
	}
]





****************** MAPPING LISTS TO WIDGETS ******************

	Accessing the Map Questios

questionText: questions[_questionIndex]['questionText'] as String,



	Instead of hard coding the Widgets you can dynamically define questions
	

questions[_questionIndex]['answers'].map((question) {
	return Answer(answer)
})
	


	By default Dart doesn't recognize the Lists contained inside map of answers
	So we explicitly tell to Dart that it is a List of String or int.



(questions[_questionIndex]['answers'] as List<Strinf>).map((question) {
	return Answer(answer)
})		



____________________________________________________


		... => Spread Operator  => 030 -> Watch Again
	
	In Dart, Spread Operator (…) and Null-aware Spread Operator (…?) 
	are used for inserting multiple elements in a collection like Lists, Maps, etc.


...(questions[_questionIndex]['answers'] as List<String>).map((answer) {
              return Answer(selectHandler: answerQuestion, answerText: answer);
}).toList()



___________________________________________________



			Final vs Const

	final => use final if a value doesn't change from the point of time when the program runs.
		it can be initialized with the value.

	

	const a = const 'a'
	 
 	We can write const infront of variable and also infront of value.
	If we write it infront of variable then the variable will be constant and if with the value then the
	value will be constant.

	

	Dart store everything as an object in memory.
	Variables are just the pointer to objects
	
	We store an object in variable => technically we store an address of object in variable.

	

var dummy = const ['Hello'];
dummy.add('Hi');
print(dummy);


	It will throw error because we initialized the value as Const 
	and after updating the dummy the whole list created again 
	
	So only make value const in those cases when you know that I will not change it in future.

	

_____________________________________________________________________



			late & ?

	they both can be used to define variables without assigning any values.

		String? a;
	
			OR

		late String a;



_____________________________________________________________________________


			IF Statements

	if() {
		
	}

	single line check => ternary operator



	You can also write conditions in variables and store in it.


var hasCorrectCredentials = userName == 'uzair' && pass == 12314;	

void main() {
  var userName = 'uzar';
  var pass = 12314;
  var hasCorrectCredentials = userName == 'uzair' && pass == 12314;
  if(hasCorrectCredentials) {
    print('Logged In');
  } else {
    print('Failed!');
  }
}

	
	We can use () brackets to specify or combine some conditions	





__________________________________________________________________________



			NULL VALUE & NULL SAFETY


	Null Values => is a special kind of built value that it can be very useful when you wanna reset value.
	
	Null Safety => Release after 2.11.0 version


pubsec.yaml => environment sdk: ">=2.12.0"   => it will on the null safety.



_________________________________________________________________________________



			Outputting Widgets Conditionally
		
			TERNARY Operator

	

body: condition ? column (
	
	// All Your Code lies here

) : Center(child: Text('You did it!'))

		 

	condition ? some code : else code;



___________________________________________________________________________________



			SPLITTING THE WIDGETS

	If you want to make your widget tree more readable or more manageable.
	one thing you should do is splitting the Widget.

	You can split your widget in sub widgets.

	In Flutter it is always encourage to create more than less widget. Also important for performance.


required => means that argument is required not miss it.



	You can divide each and every widgets.



body: condition ? Quiz() : Result()


	The code for Quiz and Result written in sperate files.
	And pass the data between these two with the help of constructors.


____________________________________________________________


		Multiple Constructors


class Player {
  final String name;
  final String color;

  Player(this.name, this.color);

  Player.fromPlayer(Player another) :
    color = another.color,
    name = another.name;
}



____________________________________________________________




	






	

	
